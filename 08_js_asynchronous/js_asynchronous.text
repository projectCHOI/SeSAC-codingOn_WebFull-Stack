# 비동기 처리 -Promise, async/await-
## 방식
  -동기: 어떤 코드가 있을 때 순서대로 진행됨
  -비동기: 순서대로 진행되지 않음. 먼저 읽힌 코드가 먼저 실행
-자바스크립트는 보통 동기적인 언어이지만 비동기적으로 특정 코드를 처리할 수 있다.

## 비동기 코드를 처리하기 위한 3가지 방법
1. callback 함수
2. promise
3. async await

### callback 함수
  -인자(매개변수)로 대입되는 함수
  -다른 함수가 실행을 끝낸 뒤 실행되는 함수
  사용처=응답을 받은 이후 처리되어야 하는 종속적인 작업

### promise
  -비동기 처리를 할 수 있는 객체
  -작업의 성공과 실패를 분리하여 반환
  기능=비동기 작업이 완료된 이후에 다음 작업을 연결시켜 진행할 수 있는 기능
-사용
resolve(value) : 작업이 성공(fulfilled)한 경우, 그 결과를 value와 함께 호출
reject(error): 에러(rejected) 발생 시 에러 객체를 나타내는 error와 함께 호출
Promise : + (finally): Promise 의 성공 여부와 상관없이 무조건적으로 실행

### async await
  -Promise 보다 직관적인 코드를 위해 등장
  -기능이 추가된 것이 아닌, Promise를 다르게 사용하는 것
-async // 비동기 실행되는 게 있음을 알림
  -함수 앞에 붙여 Promise를 반환한다.
  -async가 붙은 함수는 항상 Promise를 반환
-await //실행이 다 될 때까지 기다림
  -프로미스가 다 처리될 때까지 기다리는 역할을 하며 결과는 그 후에 반환
  -async가 있는 함수에서만 await 키워드가 사용 가능